

.486 ; create 32 bit code
.model flat, stdcall ; 32 bit memory model
option casemap :none ; case sensitive
include \masm32\include\windows.inc ; always first
include \masm32\macros\macros.asm ; MASM support macros
; include files that have MASM format prototypes for function calls
include \masm32\include\masm32.inc
include \masm32\include\gdi32.inc
include \masm32\include\user32.inc
include \masm32\include\kernel32.inc
include \masm32\include\msvcrt.inc
includelib \masm32\lib\msvcrt.lib
; Library files that have definitions for function
; exports and tested reliable prebuilt code.
includelib \masm32\lib\masm32.lib
includelib \masm32\lib\gdi32.lib
includelib \masm32\lib\user32.lib
includelib \masm32\lib\kernel32.lib
.data	; data definition directive
_temp1 dd ?,0 ; define a temporary variable 1 with initial value 0
_temp2 dd ?,0 ; define a temporary variable 2 with initial value 0
_const1 dd 2 ; define constant 2
_const2 dd 7 ; define constant 7
_const3 dd 8 ; define constant 8
_const4 dd 9 ; define constant 9
_const5 dd 7 ; define constant 7
_title db "Лабораторна робота 2. Compare operations",0 ; set the title for the message box
strbuf dw ?,0 ; define a buffer for the message box output
_text db "masm32.  Output result by MessageBox:",0ah,
"y=2a/7-c/7e    a < e",0ah,
"y=8/d-9d/c    a >= e",0ah,
"Result: %d - whole part",0ah, 0ah,
"Студент КНЕУ ФІСІТ",0 ; set the message box output text
MsgBoxCaption db "Example message window",0 ; Defines a string that will be used as the caption for the message box.
MsgBoxText_1 db "Condition  a < e",0 ; Defines a string that will be used as the message for the message box if the condition a > c is true.
MsgBoxText_2 db "Condition  a >= e",0 ; Defines a string that will be used as the message for the message box if the condition a <= c is false. 

.const 
   NULL equ  0 ; define a constant symbol named NULL and sets its value to 0.
   MB_OK equ  0 ; define a constant symbol named MB_OK and sets its value to 0. 

.code ; Command segment start directive
_start:	; Program start mark with the name _start
 
main proc 
LOCAL _a: DWORD ; declare a local variable named _a
LOCAL _b: DWORD ; declare a local variable named _b
LOCAL _c: DWORD ; declare a local variable named _c
LOCAL _d: DWORD ; declare a local variable named _d
LOCAL _e: DWORD ; declare a local variable named _e

mov _a, sval(input("Enter a = ")) ; store answer in the local variable _a
mov _b, sval(input("Enter b = ")) ; store answer in the local variable _b
mov _c, sval(input("Enter c = ")) ; store answer in the local variable _c
mov _d, sval(input("Enter d = ")) ; store answer in the local variable _d
mov _e, sval(input("Enter e = ")) ; store answer in the local variable _e
 
mov ebx, _a ; Write the number _a to the ebx register
mov eax, _e ; Write the number _c to the eax register
cmp ebx, eax  ; Compare _a and _e
jge greater_or_equal ; jump to greater_or_equal if a >= e
less:
;
mov eax, _const1  ; 2
mul _a           ; 2*a
mov ebx, eax     ; ebx = 2a
mov eax, _const5  ; 7
idiv ebx         ; eax = 7/(2a)
mov ecx, eax     ; ecx = 7/(2a)
mov eax, _c       ; c
mov ebx, _e       ; e
mul ebx           ; c*e
mov ebx, eax      ; ebx = c*e

mov eax, _const1   ; 2
mul _a             ; 2*a
mov ebx, eax       ; ebx = 2a
mov eax, _const5   ; 7
mul _e             ; 7*e
idiv ebx           ; eax = (7*e) / (2a)
sub eax, _c        ; (7*e) / (2a) - c
mov _temp2, eax    ; _temp2 = (2a/7) - (_c/7e)



invoke MessageBoxA, NULL, ADDR MsgBoxText_2, ADDR MsgBoxCaption, MB_OK ; display a message box
invoke MessageBoxA, NULL, ADDR strbuf, ADDR _title, MB_OK ; display a message box
invoke wsprintf, ADDR strbuf, ADDR _text, _temp2 ; format a string
invoke MessageBox, NULL, ADDR strbuf, ADDR _title, MB_ICONINFORMATION ; display a message box
jmp exit_program ; jump to exit_program to exit the program

greater_or_equal:
; 
mov eax, _const3 ; 8
mov ebx, eax ; save eax in ebx
mov eax, _d ; c
div ebx ; 8/d
mov _temp1, eax ; save eax in temp1
mov eax, _const4 ; 
mul _d ; 9*d
div _c ; 9*d/c
sub eax, _temp1 ; 8/d-9d/c

invoke MessageBoxA, NULL, ADDR MsgBoxText_2, ADDR MsgBoxCaption, MB_OK ; display a message box
invoke MessageBoxA, NULL, ADDR strbuf, ADDR _title, MB_OK ; display a message box
invoke wsprintf, ADDR strbuf, ADDR _text, _temp2 ; format a string
invoke MessageBox, NULL, ADDR strbuf, ADDR _title, MB_ICONINFORMATION ; display a message box

exit_program:
invoke ExitProcess, 0 ; exit the program


lexit:
 ret
main endp ; end of the function code
 ret ; OS control return
end _start ; End of the program
